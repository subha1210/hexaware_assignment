Tasks 1: Database Design:
 
1. Create the database named "HMBank"

QUERY:

mysql> CREATE DATABASE HMBank;

OUTPUT:

Query OK, 1 row affected (0.02 sec)
mysql> USE HMBank;
Database changed

2. Define the schema for the Customers, Accounts, and Transactions tables based on the 
provided schema.
6. Write SQL scripts to create the mentioned tables with appropriate data types, constraints, 
and relationships. 

Queries to these questions 2 and 6 are combined and written together.

• Customers

QUERY:

mysql> CREATE TABLE Customers (
       customer_id INT PRIMARY KEY,
       first_name VARCHAR(50) NOT NULL,
       last_name VARCHAR(50) NOT NULL,
       DOB DATE,
       email VARCHAR(100) UNIQUE,
       phone_number VARCHAR(15),
       address VARCHAR(255) );

OUTPUT:

Query OK, 0 rows affected (0.09 sec)

• Accounts

QUERY:

mysql> CREATE TABLE Accounts (
       account_id INT PRIMARY KEY,
       customer_id INT,
       account_type VARCHAR(20) CHECK (account_type IN ('savings', 'current', 'zero_balance')),
       balance DECIMAL(15,2) CHECK (balance >= 0),
       FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );

OUTPUT:

Query OK, 0 rows affected (0.10 sec)

• Transactions

QUERY:


mysql> CREATE TABLE Transactions (
       transaction_id INT PRIMARY KEY,
       account_id INT,
       transaction_type VARCHAR(20) CHECK (transaction_type IN ('deposit', 'withdrawal', 'transfer')),
       amount DECIMAL(15,2) CHECK (amount >= 0),
       transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
       FOREIGN KEY (account_id) REFERENCES Accounts(account_id) );

OUTPUT:

Query OK, 0 rows affected (0.10 sec)

5. Create appropriate Primary Key and Foreign Key constraints for referential integrity.

These are already included in the table creation commands using PRIMARY KEY and FOREIGN KEY constraints.


Tasks 2: Select, Where, Between, AND, LIKE:

1. Insert at least 10 sample records into each of the following tables. 
• Customers
• Accounts
• Transactions

QUERY:

     INSERT INTO Customers (customer_id, first_name, last_name, DOB, email, phone_number, address) VALUES
     (1, 'John', 'Doe', '1985-01-15', 'john.doe@example.com', '1234567890', '123 Main St, NY'),
     (2, 'Jane', 'Smith', '1990-04-20', 'jane.smith@example.com', '1231231234', '456 Elm St, CA'),
     (3, 'Robert', 'Brown', '1978-07-10', 'robert.brown@example.com', '9876543210', '789 Oak St, TX'),
     (4, 'Emily', 'Clark', '1995-09-05', 'emily.clark@example.com', '5556667777', '321 Pine St, FL'),
     (5, 'David', 'Johnson', '1983-03-22', 'david.johnson@example.com', '2223334444', '222 Cedar St, WA'),
     (6, 'Linda', 'Lee', '1976-08-30', 'linda.lee@example.com', '3334445555', '333 Willow St, NV'),
     (7, 'Michael', 'Davis', '1987-11-13', 'michael.davis@example.com', '4445556666', '444 Birch St, AZ'),
     (8, 'Sarah', 'Miller', '1992-05-25', 'sarah.miller@example.com', '5556667777', '555 Spruce St, TX'),
     (9, 'James', 'Wilson', '1979-07-08', 'james.wilson@example.com', '6667778888', '666 Maple St, NY'),
     (10, 'Laura', 'Taylor', '1980-12-19', 'laura.taylor@example.com', '7778889999', '777 Oak St, CA');

Query OK, 10 rows affected (0.04 sec)
Records: 10  Duplicates: 0  Warnings: 0

     INSERT INTO Accounts (account_id, customer_id, account_type, balance) VALUES
     (101, 1, 'savings', 5000.00),
     (102, 1, 'current', 15000.00),
     (103, 2, 'savings', 2000.00),
     (104, 3, 'zero_balance', 0.00),
     (105, 4, 'current', 3000.00),
     (106, 5, 'savings', 8000.00),
     (107, 6, 'current', 5000.00),
     (108, 7, 'current', 12000.00),
     (109, 8, 'savings', 3000.00),
     (110, 9, 'zero_balance', 0.00);

Query OK, 10 rows affected (0.01 sec)
Records: 10  Duplicates: 0  Warnings: 0

     INSERT INTO Transactions (transaction_id, account_id, transaction_type, amount, transaction_date) VALUES
     (1001, 101, 'deposit', 2000.00, '2025-03-01'),
     (1002, 102, 'withdrawal', 500.00, '2025-03-02'),
     (1003, 103, 'deposit', 3000.00, '2025-03-03'),
     (1004, 105, 'transfer', 1000.00, '2025-03-04'),
     (1005, 106, 'deposit', 4000.00, '2025-03-05'),
     (1006, 107, 'withdrawal', 1500.00, '2025-03-06'),
     (1007, 108, 'deposit', 7000.00, '2025-03-07'),
     (1008, 109, 'transfer', 2000.00, '2025-03-08'),
     (1009, 110, 'withdrawal', 500.00, '2025-03-09'),
     (1010, 101, 'deposit', 3000.00, '2025-03-10');

Query OK, 10 rows affected (0.04 sec)
Records: 10  Duplicates: 0  Warnings: 0

OUTPUT:

mysql> select * from customers;
+-------------+------------+-----------+------------+---------------------------+--------------+-------------------+
| customer_id | first_name | last_name | DOB        | email                     | phone_number | address           |
+-------------+------------+-----------+------------+---------------------------+--------------+-------------------+
|           1 | John       | Doe       | 1985-01-15 | john.doe@example.com      | 1234567890   | 123 Main St, NY   |
|           2 | Jane       | Smith     | 1990-04-20 | jane.smith@example.com    | 1231231234   | 456 Elm St, CA    |
|           3 | Robert     | Brown     | 1978-07-10 | robert.brown@example.com  | 9876543210   | 789 Oak St, TX    |
|           4 | Emily      | Clark     | 1995-09-05 | emily.clark@example.com   | 5556667777   | 321 Pine St, FL   |
|           5 | David      | Johnson   | 1983-03-22 | david.johnson@example.com | 2223334444   | 222 Cedar St, WA  |
|           6 | Linda      | Lee       | 1976-08-30 | linda.lee@example.com     | 3334445555   | 333 Willow St, NV |
|           7 | Michael    | Davis     | 1987-11-13 | michael.davis@example.com | 4445556666   | 444 Birch St, AZ  |
|           8 | Sarah      | Miller    | 1992-05-25 | sarah.miller@example.com  | 5556667777   | 555 Spruce St, TX |
|           9 | James      | Wilson    | 1979-07-08 | james.wilson@example.com  | 6667778888   | 666 Maple St, NY  |
|          10 | Laura      | Taylor    | 1980-12-19 | laura.taylor@example.com  | 7778889999   | 777 Oak St, CA    |
+-------------+------------+-----------+------------+---------------------------+--------------+-------------------+
10 rows in set (0.00 sec)

mysql> select * from accounts;
+------------+-------------+--------------+----------+
| account_id | customer_id | account_type | balance  |
+------------+-------------+--------------+----------+
|        101 |           1 | savings      |  5000.00 |
|        102 |           1 | current      | 15000.00 |
|        103 |           2 | savings      |  2000.00 |
|        104 |           3 | zero_balance |     0.00 |
|        105 |           4 | current      |  3000.00 |
|        106 |           5 | savings      |  8000.00 |
|        107 |           6 | current      |  5000.00 |
|        108 |           7 | current      | 12000.00 |
|        109 |           8 | savings      |  3000.00 |
|        110 |           9 | zero_balance |     0.00 |
+------------+-------------+--------------+----------+
10 rows in set (0.00 sec)

mysql> select * from transactions;
+----------------+------------+------------------+---------+---------------------+
| transaction_id | account_id | transaction_type | amount  | transaction_date    |
+----------------+------------+------------------+---------+---------------------+
|           1001 |        101 | deposit          | 2000.00 | 2025-03-01 00:00:00 |
|           1002 |        102 | withdrawal       |  500.00 | 2025-03-02 00:00:00 |
|           1003 |        103 | deposit          | 3000.00 | 2025-03-03 00:00:00 |
|           1004 |        105 | transfer         | 1000.00 | 2025-03-04 00:00:00 |
|           1005 |        106 | deposit          | 4000.00 | 2025-03-05 00:00:00 |
|           1006 |        107 | withdrawal       | 1500.00 | 2025-03-06 00:00:00 |
|           1007 |        108 | deposit          | 7000.00 | 2025-03-07 00:00:00 |
|           1008 |        109 | transfer         | 2000.00 | 2025-03-08 00:00:00 |
|           1009 |        110 | withdrawal       |  500.00 | 2025-03-09 00:00:00 |
|           1010 |        101 | deposit          | 3000.00 | 2025-03-10 00:00:00 |
+----------------+------------+------------------+---------+---------------------+
10 rows in set (0.00 sec)

2. Write SQL queries for the following tasks:

1. Write a SQL query to retrieve the name, account type and email of all customers.

QUERY:

mysql> SELECT first_name, last_name, account_type, email FROM Customers
       JOIN Accounts ON Customers.customer_id = Accounts.customer_id;
OUTPUT:

+------------+-----------+--------------+---------------------------+
| first_name | last_name | account_type | email                     |
+------------+-----------+--------------+---------------------------+
| John       | Doe       | savings      | john.doe@example.com      |
| John       | Doe       | current      | john.doe@example.com      |
| Jane       | Smith     | savings      | jane.smith@example.com    |
| Robert     | Brown     | zero_balance | robert.brown@example.com  |
| Emily      | Clark     | current      | emily.clark@example.com   |
| David      | Johnson   | savings      | david.johnson@example.com |
| Linda      | Lee       | current      | linda.lee@example.com     |
| Michael    | Davis     | current      | michael.davis@example.com |
| Sarah      | Miller    | savings      | sarah.miller@example.com  |
| James      | Wilson    | zero_balance | james.wilson@example.com  |
+------------+-----------+--------------+---------------------------+
10 rows in set (0.00 sec)

2. Write a SQL query to list all transaction corresponding customer.

QUERY:

mysql> SELECT Customers.first_name, Customers.last_name, Transactions.* FROM Transactions
       JOIN Accounts ON Transactions.account_id = Accounts.account_id
       JOIN Customers ON Accounts.customer_id = Customers.customer_id;
OUTPUT:
+------------+-----------+----------------+------------+------------------+---------+---------------------+
| first_name | last_name | transaction_id | account_id | transaction_type | amount  | transaction_date    |
+------------+-----------+----------------+------------+------------------+---------+---------------------+
| John       | Doe       |           1001 |        101 | deposit          | 2000.00 | 2025-03-01 00:00:00 |
| John       | Doe       |           1002 |        102 | withdrawal       |  500.00 | 2025-03-02 00:00:00 |
| Jane       | Smith     |           1003 |        103 | deposit          | 3000.00 | 2025-03-03 00:00:00 |
| Emily      | Clark     |           1004 |        105 | transfer         | 1000.00 | 2025-03-04 00:00:00 |
| David      | Johnson   |           1005 |        106 | deposit          | 4000.00 | 2025-03-05 00:00:00 |
| Linda      | Lee       |           1006 |        107 | withdrawal       | 1500.00 | 2025-03-06 00:00:00 |
| Michael    | Davis     |           1007 |        108 | deposit          | 7000.00 | 2025-03-07 00:00:00 |
| Sarah      | Miller    |           1008 |        109 | transfer         | 2000.00 | 2025-03-08 00:00:00 |
| James      | Wilson    |           1009 |        110 | withdrawal       |  500.00 | 2025-03-09 00:00:00 |
| John       | Doe       |           1010 |        101 | deposit          | 3000.00 | 2025-03-10 00:00:00 |
+------------+-----------+----------------+------------+------------------+---------+---------------------+
10 rows in set (0.00 sec)

3. Write a SQL query to increase the balance of a specific account by a certain amount.

QUERY:

mysql> UPDATE Accounts SET balance = balance + 1000 WHERE account_id = 101;

OUTPUT:

Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from accounts;
+------------+-------------+--------------+----------+
| account_id | customer_id | account_type | balance  |
+------------+-------------+--------------+----------+
|        101 |           1 | savings      |  6000.00 |
|        102 |           1 | current      | 15000.00 |
|        103 |           2 | savings      |  2000.00 |
|        104 |           3 | zero_balance |     0.00 |
|        105 |           4 | current      |  3000.00 |
|        106 |           5 | savings      |  8000.00 |
|        107 |           6 | current      |  5000.00 |
|        108 |           7 | current      | 12000.00 |
|        109 |           8 | savings      |  3000.00 |
|        110 |           9 | zero_balance |     0.00 |
+------------+-------------+--------------+----------+
10 rows in set (0.00 sec)

4. Write a SQL query to Combine first and last names of customers as a full_name.

QUERY:

mysql> SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name
       FROM Customers c;

OUTPUT:
+---------------+
| full_name     |
+---------------+
| John Doe      |
| Jane Smith    |
| Robert Brown  |
| Emily Clark   |
| David Johnson |
| Linda Lee     |
| Michael Davis |
| Sarah Miller  |
| James Wilson  |
| Laura Taylor  |
+---------------+
10 rows in set (0.00 sec)

5. Write a SQL query to remove accounts with a balance of zero where the account 
type is savings.

QUERY:

mysql> DELETE FROM Accounts WHERE balance = 0 AND account_type = 'savings';

OUTPUT:

Query OK, 0 rows affected (0.00 sec)

mysql> select * from accounts;
+------------+-------------+--------------+----------+
| account_id | customer_id | account_type | balance  |
+------------+-------------+--------------+----------+
|        101 |           1 | savings      |  6000.00 |
|        102 |           1 | current      | 15000.00 |
|        103 |           2 | savings      |  2000.00 |
|        104 |           3 | zero_balance |     0.00 |
|        105 |           4 | current      |  3000.00 |
|        106 |           5 | savings      |  8000.00 |
|        107 |           6 | current      |  5000.00 |
|        108 |           7 | current      | 12000.00 |
|        109 |           8 | savings      |  3000.00 |
|        110 |           9 | zero_balance |     0.00 |
+------------+-------------+--------------+----------+
10 rows in set (0.00 sec)

6. Write a SQL query to Find customers living in a specific city.

QUERY:

mysql> SELECT * FROM Customers WHERE address LIKE '%NY%';

OUTPUT:
+-------------+------------+-----------+------------+--------------------------+--------------+------------------+
| customer_id | first_name | last_name | DOB        | email                    | phone_number | address          |
+-------------+------------+-----------+------------+--------------------------+--------------+------------------+
|           1 | John       | Doe       | 1985-01-15 | john.doe@example.com     | 1234567890   | 123 Main St, NY  |
|           9 | James      | Wilson    | 1979-07-08 | james.wilson@example.com | 6667778888   | 666 Maple St, NY |
+-------------+------------+-----------+------------+--------------------------+--------------+------------------+
2 rows in set (0.00 sec)

7. Write a SQL query to Get the account balance for a specific account.

QUERY:

mysql> SELECT balance FROM Accounts WHERE account_id = 101;

OUTPUT:
+---------+
| balance |
+---------+
| 6000.00 |
+---------+
1 row in set (0.00 sec)

8. Write a SQL query to List all current accounts with a balance greater than $1,000.

QUERY:

mysql> SELECT * FROM Accounts WHERE account_type = 'current' AND balance > 1000;

OUTPUT:
+------------+-------------+--------------+----------+
| account_id | customer_id | account_type | balance  |
+------------+-------------+--------------+----------+
|        102 |           1 | current      | 15000.00 |
|        105 |           4 | current      |  3000.00 |
|        107 |           6 | current      |  5000.00 |
|        108 |           7 | current      | 12000.00 |
+------------+-------------+--------------+----------+
4 rows in set (0.00 sec)

9. Write a SQL query to Retrieve all transactions for a specific account.

QUERY:

mysql> SELECT * FROM Transactions WHERE account_id = 101;

OUTPUT:
+----------------+------------+------------------+---------+---------------------+
| transaction_id | account_id | transaction_type | amount  | transaction_date    |
+----------------+------------+------------------+---------+---------------------+
|           1001 |        101 | deposit          | 2000.00 | 2025-03-01 00:00:00 |
|           1010 |        101 | deposit          | 3000.00 | 2025-03-10 00:00:00 |
+----------------+------------+------------------+---------+---------------------+
2 rows in set (0.00 sec)

10. Write a SQL query to Calculate the interest accrued on savings accounts based on a 
given interest rate.

QUERY:

mysql> SELECT account_id, balance * 0.05 AS interest_accrued FROM Accounts WHERE account_type = 'savings';

OUTPUT:
+------------+------------------+
| account_id | interest_accrued |
+------------+------------------+
|        101 |         300.0000 |
|        103 |         100.0000 |
|        106 |         400.0000 |
|        109 |         150.0000 |
+------------+------------------+
4 rows in set (0.00 sec)

11. Write a SQL query to Identify accounts where the balance is less than a specified 
overdraft limit.

QUERY:

mysql> SELECT * FROM Accounts WHERE balance < 500;

OUTPUT:
+------------+-------------+--------------+---------+
| account_id | customer_id | account_type | balance |
+------------+-------------+--------------+---------+
|        104 |           3 | zero_balance |    0.00 |
|        110 |           9 | zero_balance |    0.00 |
+------------+-------------+--------------+---------+
2 rows in set (0.00 sec)

12. Write a SQL query to Find customers not living in a specific city.

QUERY:

mysql> SELECT * FROM Customers WHERE address NOT LIKE '%NY%';

OUTPUT:
+-------------+------------+-----------+------------+---------------------------+--------------+-------------------+
| customer_id | first_name | last_name | DOB        | email                     | phone_number | address           |
+-------------+------------+-----------+------------+---------------------------+--------------+-------------------+
|           2 | Jane       | Smith     | 1990-04-20 | jane.smith@example.com    | 1231231234   | 456 Elm St, CA    |
|           3 | Robert     | Brown     | 1978-07-10 | robert.brown@example.com  | 9876543210   | 789 Oak St, TX    |
|           4 | Emily      | Clark     | 1995-09-05 | emily.clark@example.com   | 5556667777   | 321 Pine St, FL   |
|           5 | David      | Johnson   | 1983-03-22 | david.johnson@example.com | 2223334444   | 222 Cedar St, WA  |
|           6 | Linda      | Lee       | 1976-08-30 | linda.lee@example.com     | 3334445555   | 333 Willow St, NV |
|           7 | Michael    | Davis     | 1987-11-13 | michael.davis@example.com | 4445556666   | 444 Birch St, AZ  |
|           8 | Sarah      | Miller    | 1992-05-25 | sarah.miller@example.com  | 5556667777   | 555 Spruce St, TX |
|          10 | Laura      | Taylor    | 1980-12-19 | laura.taylor@example.com  | 7778889999   | 777 Oak St, CA    |
+-------------+------------+-----------+------------+---------------------------+--------------+-------------------+
8 rows in set (0.00 sec)

Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:

1. Write a SQL query to Find the average account balance for all customers.

QUERY:

mysql> SELECT AVG(balance) AS avg_balance FROM Accounts;

OUTPUT:
+-------------+
| avg_balance |
+-------------+
| 5400.000000 |
+-------------+
1 row in set (0.04 sec)

2. Write a SQL query to Retrieve the top 10 highest account balances.

QUERY:

mysql> SELECT * FROM Accounts ORDER BY balance DESC LIMIT 10;

OUTPUT:
+------------+-------------+--------------+----------+
| account_id | customer_id | account_type | balance  |
+------------+-------------+--------------+----------+
|        102 |           1 | current      | 15000.00 |
|        108 |           7 | current      | 12000.00 |
|        106 |           5 | savings      |  8000.00 |
|        101 |           1 | savings      |  6000.00 |
|        107 |           6 | current      |  5000.00 |
|        105 |           4 | current      |  3000.00 |
|        109 |           8 | savings      |  3000.00 |
|        103 |           2 | savings      |  2000.00 |
|        104 |           3 | zero_balance |     0.00 |
|        110 |           9 | zero_balance |     0.00 |
+------------+-------------+--------------+----------+
10 rows in set (0.00 sec)

3. Write a SQL query to Calculate Total Deposits for All Customers in specific date.

QUERY:

mysql> SELECT SUM(amount) AS total_deposits FROM Transactions WHERE transaction_type = 'deposit' AND transaction_date = '2025-03-01';

OUTPUT:

+----------------+
| total_deposits |
+----------------+
|        2000.00 |
+----------------+
1 row in set (0.03 sec)

4. Write a SQL query to Find the Oldest and Newest Customers.

QUERY:

mysql> SELECT MIN(DOB) AS oldest_customer, MAX(DOB) AS newest_customer
       FROM Customers;

OUTPUT:
+-----------------+-----------------+
| oldest_customer | newest_customer |
+-----------------+-----------------+
| 1976-08-30      | 1995-09-05      |
+-----------------+-----------------+
1 row in set (0.00 sec)

5. Write a SQL query to Retrieve transaction details along with the account type.

QUERY:

mysql> SELECT t.transaction_id, t.account_id, t.transaction_type, t.amount, a.account_type
       FROM Transactions t
       JOIN Accounts a ON t.account_id = a.account_id;

OUTPUT:
+----------------+------------+------------------+---------+--------------+
| transaction_id | account_id | transaction_type | amount  | account_type |
+----------------+------------+------------------+---------+--------------+
|           1001 |        101 | deposit          | 2000.00 | savings      |
|           1002 |        102 | withdrawal       |  500.00 | current      |
|           1003 |        103 | deposit          | 3000.00 | savings      |
|           1004 |        105 | transfer         | 1000.00 | current      |
|           1005 |        106 | deposit          | 4000.00 | savings      |
|           1006 |        107 | withdrawal       | 1500.00 | current      |
|           1007 |        108 | deposit          | 7000.00 | current      |
|           1008 |        109 | transfer         | 2000.00 | savings      |
|           1009 |        110 | withdrawal       |  500.00 | zero_balance |
|           1010 |        101 | deposit          | 3000.00 | savings      |
+----------------+------------+------------------+---------+--------------+
10 rows in set (0.00 sec)

6. Write a SQL query to Get a list of customers along with their account details.

QUERY:

mysql> SELECT c.customer_id, c.first_name, c.last_name, a.account_id, a.account_type, a.balance
       FROM Customers c
       JOIN Accounts a ON c.customer_id = a.customer_id;

OUTPUT:
+-------------+------------+-----------+------------+--------------+----------+
| customer_id | first_name | last_name | account_id | account_type | balance  |
+-------------+------------+-----------+------------+--------------+----------+
|           1 | John       | Doe       |        101 | savings      |  6000.00 |
|           1 | John       | Doe       |        102 | current      | 15000.00 |
|           2 | Jane       | Smith     |        103 | savings      |  2000.00 |
|           3 | Robert     | Brown     |        104 | zero_balance |     0.00 |
|           4 | Emily      | Clark     |        105 | current      |  3000.00 |
|           5 | David      | Johnson   |        106 | savings      |  8000.00 |
|           6 | Linda      | Lee       |        107 | current      |  5000.00 |
|           7 | Michael    | Davis     |        108 | current      | 12000.00 |
|           8 | Sarah      | Miller    |        109 | savings      |  3000.00 |
|           9 | James      | Wilson    |        110 | zero_balance |     0.00 |
+-------------+------------+-----------+------------+--------------+----------+
10 rows in set (0.00 sec)

7. Write a SQL query to Retrieve transaction details along with customer information for a 
specific account.

QUERY:

mysql> SELECT t.transaction_id, t.account_id, t.transaction_type, t.amount, c.customer_id, c.first_name, c.last_name
       FROM Transactions t
       JOIN Accounts a ON t.account_id = a.account_id
       JOIN Customers c ON a.customer_id = c.customer_id
       WHERE t.account_id = 101;

OUTPUT:
+----------------+------------+------------------+---------+-------------+------------+-----------+
| transaction_id | account_id | transaction_type | amount  | customer_id | first_name | last_name |
+----------------+------------+------------------+---------+-------------+------------+-----------+
|           1001 |        101 | deposit          | 2000.00 |           1 | John       | Doe       |
|           1010 |        101 | deposit          | 3000.00 |           1 | John       | Doe       |
+----------------+------------+------------------+---------+-------------+------------+-----------+
2 rows in set (0.00 sec)

8. Write a SQL query to Identify customers who have more than one account.

QUERY:

mysql> SELECT Customers.*, COUNT(Accounts.account_id) AS account_count
       FROM Customers
       JOIN Accounts ON Customers.customer_id = Accounts.customer_id
       GROUP BY Customers.customer_id HAVING COUNT(Accounts.account_id) > 1;

OUTPUT:
+-------------+------------+-----------+------------+----------------------+--------------+-----------------+---------------+
| customer_id | first_name | last_name | DOB        | email                | phone_number | address         | account_count |
+-------------+------------+-----------+------------+----------------------+--------------+-----------------+---------------+
|           1 | John       | Doe       | 1985-01-15 | john.doe@example.com | 1234567890   | 123 Main St, NY |             2 |
+-------------+------------+-----------+------------+----------------------+--------------+-----------------+---------------+
1 row in set (0.03 sec)

9. Write a SQL query to Calculate the difference in transaction amounts between deposits and 
withdrawals.

QUERY:

mysql> SELECT account_id,
       SUM(CASE WHEN transaction_type = 'deposit' THEN amount ELSE 0 END) -
       SUM(CASE WHEN transaction_type = 'withdrawal' THEN amount ELSE 0 END) AS net_difference
       FROM Transactions
       GROUP BY account_id;

OUTPUT:
+------------+----------------+
| account_id | net_difference |
+------------+----------------+
|        101 |        5000.00 |
|        102 |        -500.00 |
|        103 |        3000.00 |
|        105 |           0.00 |
|        106 |        4000.00 |
|        107 |       -1500.00 |
|        108 |        7000.00 |
|        109 |           0.00 |
|        110 |        -500.00 |
+------------+----------------+
9 rows in set (0.00 sec)

10. Write a SQL query to Calculate the average daily balance for each account over a specified 
period.

QUERY:

mysql> SELECT account_id, AVG(amount) AS avg_daily_balance
       FROM Transactions
       WHERE transaction_date BETWEEN '2025-03-01' AND '2025-03-10'
       GROUP BY account_id;

OUTPUT:
+------------+-------------------+
| account_id | avg_daily_balance |
+------------+-------------------+
|        101 |       2500.000000 |
|        102 |        500.000000 |
|        103 |       3000.000000 |
|        105 |       1000.000000 |
|        106 |       4000.000000 |
|        107 |       1500.000000 |
|        108 |       7000.000000 |
|        109 |       2000.000000 |
|        110 |        500.000000 |
+------------+-------------------+
9 rows in set (0.03 sec)

11. Calculate the total balance for each account type.

QUERY:

mysql> SELECT account_type, SUM(balance) AS total_balance
       FROM Accounts
       GROUP BY account_type
       ORDER BY total_balance DESC;

OUTPUT:

+--------------+---------------+
| account_type | total_balance |
+--------------+---------------+
| current      |      35000.00 |
| savings      |      19000.00 |
| zero_balance |          0.00 |
+--------------+---------------+
3 rows in set (0.00 sec)

12. Identify accounts with the highest number of transactions order by descending order.

QUERY:

mysql> SELECT account_id, COUNT(transaction_id) AS transaction_count
       FROM Transactions
       GROUP BY account_id
       ORDER BY transaction_count DESC;

OUTPUT:
+------------+-------------------+
| account_id | transaction_count |
+------------+-------------------+
|        101 |                 2 |
|        102 |                 1 |
|        103 |                 1 |
|        105 |                 1 |
|        106 |                 1 |
|        107 |                 1 |
|        108 |                 1 |
|        109 |                 1 |
|        110 |                 1 |
+------------+-------------------+
9 rows in set (0.00 sec)

13. List customers with high aggregate account balances, along with their account types.

QUERY:

mysql> SELECT Customers.*, Accounts.account_type, SUM(Accounts.balance) AS total_balance
       FROM Customers
       JOIN Accounts ON Customers.customer_id = Accounts.customer_id
       GROUP BY Customers.customer_id, Accounts.account_type
       HAVING SUM(Accounts.balance) > 10000;

OUTPUT:
+-------------+------------+-----------+------------+---------------------------+--------------+------------------+--------------+---------------+
| customer_id | first_name | last_name | DOB        | email                     | phone_number | address          | account_type | total_balance |
+-------------+------------+-----------+------------+---------------------------+--------------+------------------+--------------+---------------+
|           1 | John       | Doe       | 1985-01-15 | john.doe@example.com      | 1234567890   | 123 Main St, NY  | current      |      15000.00 |
|           7 | Michael    | Davis     | 1987-11-13 | michael.davis@example.com | 4445556666   | 444 Birch St, AZ | current      |      12000.00 |
+-------------+------------+-----------+------------+---------------------------+--------------+------------------+--------------+---------------+
2 rows in set (0.03 sec)

14. Identify and list duplicate transactions based on transaction amount, date, and account.

QUERY:

mysql> SELECT account_id, amount, transaction_date, COUNT(*) AS duplicate_count
    -> FROM Transactions
    -> GROUP BY account_id, amount, transaction_date
    -> HAVING COUNT(*) > 1;

OUTPUT:

Empty set (0.00 sec)

Tasks 4: Subquery and its type:

1. Retrieve the customer(s) with the highest account balance.

QUERY:

mysql> SELECT * FROM Customers WHERE customer_id = (SELECT customer_id FROM Accounts ORDER BY balance DESC LIMIT 1);

OUTPUT:
+-------------+------------+-----------+------------+----------------------+--------------+-----------------+
| customer_id | first_name | last_name | DOB        | email                | phone_number | address         |
+-------------+------------+-----------+------------+----------------------+--------------+-----------------+
|           1 | John       | Doe       | 1985-01-15 | john.doe@example.com | 1234567890   | 123 Main St, NY |
+-------------+------------+-----------+------------+----------------------+--------------+-----------------+
1 row in set (0.03 sec)

2. Calculate the average account balance for customers who have more than one account.

QUERY:

mysql> SELECT AVG(balance) AS avg_balance FROM Accounts WHERE customer_id IN (
       SELECT customer_id FROM Accounts GROUP BY customer_id HAVING COUNT(account_id) > 1 );

OUTPUT:

+--------------+
| avg_balance  |
+--------------+
| 10500.000000 |
+--------------+
1 row in set (0.03 sec)

3. Retrieve accounts with transactions whose amounts exceed the average transaction amount.

QUERY:

mysql> SELECT * FROM Transactions WHERE amount > (SELECT AVG(amount) FROM Transactions);

OUTPUT:

+----------------+------------+------------------+---------+---------------------+
| transaction_id | account_id | transaction_type | amount  | transaction_date    |
+----------------+------------+------------------+---------+---------------------+
|           1003 |        103 | deposit          | 3000.00 | 2025-03-03 00:00:00 |
|           1005 |        106 | deposit          | 4000.00 | 2025-03-05 00:00:00 |
|           1007 |        108 | deposit          | 7000.00 | 2025-03-07 00:00:00 |
|           1010 |        101 | deposit          | 3000.00 | 2025-03-10 00:00:00 |
+----------------+------------+------------------+---------+---------------------+
4 rows in set (0.00 sec)

4. Identify customers who have no recorded transactions.

QUERY:

mysql> SELECT * FROM Customers WHERE customer_id NOT IN (
       SELECT DISTINCT customer_id FROM Accounts JOIN Transactions ON Accounts.account_id = Transactions.account_id );

OUTPUT:

+-------------+------------+-----------+------------+--------------------------+--------------+----------------+
| customer_id | first_name | last_name | DOB        | email                    | phone_number | address        |
+-------------+------------+-----------+------------+--------------------------+--------------+----------------+
|           3 | Robert     | Brown     | 1978-07-10 | robert.brown@example.com | 9876543210   | 789 Oak St, TX |
|          10 | Laura      | Taylor    | 1980-12-19 | laura.taylor@example.com | 7778889999   | 777 Oak St, CA |
+-------------+------------+-----------+------------+--------------------------+--------------+----------------+
2 rows in set (0.00 sec)

5. Calculate the total balance of accounts with no recorded transactions.

QUERY:

mysql> SELECT SUM(balance) AS total_balance FROM Accounts WHERE account_id NOT IN (
       SELECT DISTINCT account_id FROM Transactions);

OUTPUT:

+---------------+
| total_balance |
+---------------+
|          0.00 |
+---------------+
1 row in set (0.00 sec)

6. Retrieve transactions for accounts with the lowest balance.

QUERY:

mysql> SELECT t.transaction_id, t.account_id, t.transaction_type, t.amount
       FROM Transactions t
       WHERE t.account_id IN (SELECT a.account_id
       FROM Accounts a
       WHERE a.balance = (SELECT MIN(balance)
       FROM Accounts));

OUTPUT:

+----------------+------------+------------------+--------+
| transaction_id | account_id | transaction_type | amount |
+----------------+------------+------------------+--------+
|           1009 |        110 | withdrawal       | 500.00 |
+----------------+------------+------------------+--------+
1 row in set (0.03 sec)

7. Identify customers who have accounts of multiple types.

QUERY:

mysql> SELECT c.customer_id, c.first_name, c.last_name
       FROM Customers c
       WHERE c.customer_id IN (SELECT a.customer_id
       FROM Accounts a
       GROUP BY a.customer_id
       HAVING COUNT(DISTINCT a.account_type) > 1 );

OUTPUT:

+-------------+------------+-----------+
| customer_id | first_name | last_name |
+-------------+------------+-----------+
|           1 | John       | Doe       |
+-------------+------------+-----------+
1 row in set (0.00 sec)


8. Calculate the percentage of each account type out of the total number of accounts.

QUERY:

mysql> SELECT a.account_type, COUNT(a.account_id) AS num_accounts,
       (COUNT(a.account_id) / (SELECT COUNT(*) FROM Accounts)) * 100 AS percentage
       FROM Accounts a
       GROUP BY a.account_type;

OUTPUT:

+--------------+--------------+------------+
| account_type | num_accounts | percentage |
+--------------+--------------+------------+
| savings      |            4 |    40.0000 |
| current      |            4 |    40.0000 |
| zero_balance |            2 |    20.0000 |
+--------------+--------------+------------+
3 rows in set (0.00 sec)

9. Retrieve all transactions for a customer with a given customer_id.

QUERY:

mysql> SELECT * FROM Transactions WHERE account_id IN (
       SELECT account_id FROM Accounts WHERE customer_id = 1 );

OUTPUT:

+----------------+------------+------------------+---------+---------------------+
| transaction_id | account_id | transaction_type | amount  | transaction_date    |
+----------------+------------+------------------+---------+---------------------+
|           1001 |        101 | deposit          | 2000.00 | 2025-03-01 00:00:00 |
|           1010 |        101 | deposit          | 3000.00 | 2025-03-10 00:00:00 |
|           1002 |        102 | withdrawal       |  500.00 | 2025-03-02 00:00:00 |
+----------------+------------+------------------+---------+---------------------+
3 rows in set (0.00 sec)

10. Calculate the total balance for each account type, including a subquery within the SELECT 
clause.

QUERY:

mysql> SELECT account_type, (SELECT SUM(balance) FROM Accounts A WHERE A.account_type = Accounts.account_type) AS total_balance
       FROM Accounts GROUP BY account_type;

OUTPUT:

+--------------+---------------+
| account_type | total_balance |
+--------------+---------------+
| savings      |      19000.00 |
| current      |      35000.00 |
| zero_balance |          0.00 |
+--------------+---------------+
3 rows in set (0.03 sec)
